# Import packages for data manipulation & data visualization
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


# Load dataset into dataframe
data = pd.read_csv("tiktok_dataset.csv")

# Create a boxplot to visualize distribution of `video_duration_sec`
data.boxplot(column='video_duration_sec')
plt.show()


# Create a histogram
sns.histplot(data.video_duration_sec, bins=range(0,61,5))
plt.xlabel('Values')
plt.ylabel('Frequency')
plt.title('Video_duration_Histogram')


# Create a boxplot to visualize distribution of `video_view_count`
data.boxplot(column='video_view_count')


# Create a histogram
plt.hist(data.video_view_count, edgecolor='Black')
plt.xlabel('Values')
plt.ylabel('Frequency')
plt.title('Video_view_count_Histogram')


# Create a boxplot to visualize distribution of `video_like_count`
data.boxplot(column='video_like_count')


# Create a histogram
plt.hist(data.video_like_count, edgecolor='Black')
plt.xlabel('Values')
plt.ylabel('Frequency')
plt.title('video_like_count_Histogram')


# Create a boxplot to visualize distribution of `video_comment_count`
data.boxplot(column='video_comment_count')


# Create a histogram
plt.hist(data.video_comment_count, edgecolor='Black')
plt.xlabel('Comments')
plt.ylabel('Num_of_Videos')
plt.title('video_comment_count_Histogram')


# Create a boxplot to visualize distribution of `video_share_count`
data.boxplot(column='video_share_count')


# Create a histogram
plt.hist(data.video_share_count, bins=10, edgecolor='Black')
plt.xlabel('Shares')
plt.ylabel('Num_of_Videos')
plt.title('video_Share_count_Histogram')


#Create a boxplot to visualize distribution of `video_download_count`
data.boxplot(column='video_download_count')


# Create a histogram
plt.hist(data.video_download_count, edgecolor='Black')
plt.xlabel('downloads')
plt.ylabel('Num_of_Videos')
plt.title('video_download_count_Histogram')


# Create a histogram
sns.histplot(data=data, x='claim_status', hue='verified_status', edgecolor='Black',multiple='dodge')
plt.xlabel('verification_status')
plt.ylabel('Num_of_Videos')
plt.title('verification_status_Histogram')


# Create a histogram
sns.histplot(data, x='claim_status', hue='author_ban_status', multiple='dodge', 
             hue_order=['active', 'under review', 'banned'],
            palette={'active':'green', 'under review':'orange', 'banned':'red'})

plt.xlabel('claim_status')
plt.ylabel('Num_of_Videos')
plt.title('claim&Authur_Status_Histogram')


#### **Median view counts by ban status**
# Create a bar plot
median_views = data.groupby(['author_ban_status'])['video_view_count'].median()

plt.bar(median_views.index, median_views.values)
plt.xlabel('Author Ban Status')
plt.ylabel('Median Video Views')
plt.title('Median Video Views by Author Ban Status')
plt.show()


# Calculate the median view count for claim status.
median_views = data.groupby(['claim_status'])['video_view_count'].median()
median_views


median_views = data.groupby(['claim_status'])['video_view_count'].median()
plt.bar(median_views.index, median_views.values)
plt.xlabel('Claim Status')
plt.ylabel('Median Video Views')
plt.title('Median Video Views by Claim Status')
plt.show()


#Create a pie graph that depicts the proportions of total views for claim videos and total views for opinion videos.
# Create a pie graph

plt.pie(median_views.values, labels=median_views.index, autopct='%1.1f%%')
plt.title('Total views by claim status')
plt.show()


#Determine outliers**

for_columns = data.columns[7:]

for x in for_columns:

    IQR = data[x].quantile(0.75) - data[x].quantile(0.25)
    median = data[x].median()
    threshold = median + 1.5*IQR
    outliers = data[data[x] > threshold]      
    cnt = len(outliers)   
  
    print(f"Column name: {x} IQR: {data[x].quantile(0.75) - data[x].quantile(0.25) }")
    print(f"Column name: {x} Median: {median}")
    print(f"Column name: {x} outlier threshold: {median + 1.5*IQR}")
    print(f"Column name: {x}, Number of outliers: {cnt} ")
    print('\n')


#### **Scatterplot**
# Create a scatterplot of `video_like_count` versus `video_comment_count` according to 'claim_status'

sns.scatterplot(x=data["video_view_count"], y=data["video_like_count"],
                hue=data["claim_status"], s=10, alpha=.3)
plt.show()



  
